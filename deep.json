{
   "package": {
     "name": "@deep-foundation/payments-tinkoff-c2b-test",
     "version": "0.2.3"
   },
   "data": [
     {
       "package": {
         "dependencyId": 0,
         "containValue": "DoTest"
       },
       "id": 1
     },
     {
       "package": {
         "dependencyId": 1,
         "containValue": "SyncTextFile"
       },
       "id": 2
     },
     {
       "package": {
         "dependencyId": 1,
         "containValue": "Handler"
       },
       "id": 3
     },
     {
       "package": {
         "dependencyId": 1,
         "containValue": "dockerSupportsJs"
       },
       "id": 4
     },
     {
       "package": {
         "dependencyId": 1,
         "containValue": "HandleInsert"
       },
       "id": 5
     },
     {
       "id": "DoTest",
       "type": 1
     },
     {
       "id": "DoTestInsertHandlerCode",
       "type": 2,
       "value": {
         "value": "async ({ deep, require, data: { triggeredByLinkId } }) => {\r\n  const { execSync } = require('child_process');\r\n  const assert = require('assert');\r\n  const puppeteer = require('puppeteer');\r\n  const { createSerialOperation } = require('@deep-foundation/deeplinks/imports/gql/serial.js');\r\n\r\n  await installDependencies()\r\n\r\n  const routeLink = await getRouteLink();\r\n  const route = routeLink.value.value;\r\n  const portLink = await getPort()\r\n  const port = portLink.value.value;\r\n  const terminalKeyLink = await getTerminalKeyLink();\r\n  const terminalKey = terminalKeyLink.value.value;\r\n  const terminalPasswordLink = await getTerminalPasswordLink();\r\n  const terminalPassword = terminalPasswordLink.value.value;\r\n  const sumLink = await getSumLink();\r\n  const sum = sumLink.value.value;\r\n\r\n  const reservedIds = await deep.reserve(13);\r\n\r\n  const routeLinkId = reservedIds.pop();\r\n  const routerStringUseLinkId = reservedIds.pop();\r\n  const routerLinkId = reservedIds.pop();\r\n  const portLinkId = reservedIds.pop();\r\n\r\n  const notificationHandlerLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"NotificationHandler\")\r\n  const containTypeLinkId = await deep.id(\"@deep-foundation/core\", \"Contain\");\r\n  const routeTypeLinkId = await deep.id(\"@deep-foundation/core\", \"Route\");\r\n  const routerTypeLinkId = await deep.id(\"@deep-foundation/core\", \"Router\");\r\n  const portTypeLinkId = await deep.id(\"@deep-foundation/core\", \"Port\");\r\n  const routerStringUseTypeLinkId = await deep.id(\"@deep-foundation/core\", \"RouterStringUse\");\r\n  const routerListeningTypeLinkId = await deep.id(\"@deep-foundation/core\", \"RouterListening\");\r\n  const syncTextFileTypeLinkId = await deep.id(\"@deep-foundation/core\", \"SyncTextFile\");\r\n\r\n  const paymentTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Payment\");\r\n  const sumTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Sum\");\r\n  const paymentObjectTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Object\");\r\n  const payTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Pay\");\r\n  const payedTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Payed\");\r\n  const urlTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Url\");\r\n\r\n  await insertRouteHandler();\r\n\r\n  const storageBusinessLinkId = reservedIds.pop();\r\n  const terminalKeyLinkId = reservedIds.pop();\r\n  const terminalPasswordLinkId = reservedIds.pop();\r\n  const notificationUrlLinkId = reservedIds.pop();\r\n  const productLinkId = reservedIds.pop();\r\n\r\n  const storageBusinessInsertSerialOperationData = await getStorageBusinessInsertSerialOperationData({\r\n    storageBusinessLinkId\r\n  });\r\n\r\n  const terminalPasswordInsertSerialOperationData = await getTerminalPasswordInsertSerialOperationData({\r\n    terminalPasswordLinkId,\r\n    storageBusinessLinkId\r\n  })\r\n\r\n  const terminalPasswordValueInsertSerialOperationData = await getTerminalPasswordValueInsertSerialOperationData({\r\n    terminalPasswordLinkId,\r\n    terminalPassword\r\n  })\r\n\r\n  const usesTerminalPasswordInsertSerialOperationData = await getUsesTerminalPasswordInsertSerialOperationData({\r\n    storageBusinessLinkId,\r\n    terminalPasswordLinkId\r\n  });\r\n\r\n  const terminalKeyInsertSerialOperationData = await getTerminalKeyInsertSerialOperationData({\r\n    storageBusinessLinkId,\r\n    terminalKeyLinkId\r\n  });\r\n\r\n  const terminalKeyValueInsertSerialOperationData = await getTerminalKeyValueInsertSerialOperationData({\r\n    terminalKeyLinkId,\r\n    terminalKey\r\n  })\r\n\r\n  const usesTerminalKeyInsertSerialOperationData = await getUsesTerminalKeyInsertSerialOperationData({\r\n    storageBusinessLinkId,\r\n    terminalKeyLinkId\r\n  })\r\n\r\n  const notificatoinUrlInsertSerialOperationData = await getNotificationUrlInsertSerialOperationData({\r\n    notificationUrlLinkId,\r\n    storageBusinessLinkId\r\n  })\r\n\r\n  const notificationUrlValueInsertSerialOperationData = await getNotificationUrlInsertSerialOperationData({\r\n    notificationUrlLinkId,\r\n    storageBusinessLinkId\r\n  })\r\n\r\n  const usesNotificationUrlInsertSerialOperationData = await getUsesNotificationUrlInsertSerialOperationData({\r\n    notificationUrlLinkId,\r\n    storageBusinessLinkId\r\n  })\r\n\r\n  const productInsertSerialOperationData = await getProductInsertSerialOperationData({\r\n    productLinkId\r\n  })\r\n\r\n  await deep.serial({\r\n    operations: [\r\n      storageBusinessInsertSerialOperationData,\r\n      terminalPasswordInsertSerialOperationData,\r\n      terminalPasswordInsertSerialOperationData,\r\n      terminalPasswordValueInsertSerialOperationData,\r\n      usesTerminalPasswordInsertSerialOperationData,\r\n      terminalKeyInsertSerialOperationData,\r\n      terminalKeyValueInsertSerialOperationData,\r\n      usesTerminalKeyInsertSerialOperationData,\r\n      notificatoinUrlInsertSerialOperationData,\r\n      notificationUrlValueInsertSerialOperationData,\r\n      usesNotificationUrlInsertSerialOperationData,\r\n      productInsertSerialOperationData\r\n    ]\r\n  })\r\n\r\n  const paymentLinkId = reservedIds.pop();\r\n  const sumLinkId = reservedIds.pop();\r\n  const objectLinkId = reservedIds.pop();\r\n  const payLinkId = reservedIds.pop();\r\n\r\n  const paymentInsertData = await getPaymentInsertSerialOperationData({\r\n    paymentLinkId,\r\n    storageBusinessLinkId\r\n  });\r\n\r\n  const sumInsertData = await getSumInsertSerialOperationData({\r\n    paymentLinkId,\r\n    sumLinkId\r\n  });\r\n\r\n  const sumValueInsertData = await getSumValueInsertSerialOperationData({\r\n    sum,\r\n    sumLinkId\r\n  })\r\n\r\n  const objectInsertData = await getObjectInsertSerialOperationData({\r\n    objectLinkId,\r\n    paymentLinkId,\r\n    productLinkId\r\n  }) \r\n\r\n  const payInsertData = await getPayInsertSerialOperationData({\r\n    payLinkId,\r\n    sumLinkId\r\n  })\r\n\r\n  await deep.serial({\r\n    operations: [\r\n      paymentInsertData,\r\n      sumInsertData,\r\n      sumValueInsertData,\r\n      objectInsertData,\r\n      payInsertData\r\n    ]\r\n  })\r\n\r\n  async function tryGetLink({ selectData, delayMs, attemptsCount }) {\r\n    let resultLink;\r\n    for (let i = 0; i < attemptsCount; i++) {\r\n      const { data: [link] } = await deep.select(selectData);\r\n\r\n      if (link) {\r\n        resultLink = link\r\n      }\r\n\r\n      await sleep(delayMs);\r\n    }\r\n    return { link: resultLink };\r\n  }\r\n\r\n  const { link: urlLink } = await tryGetLink({\r\n    delayMs: 1000, attemptsCount: 10, selectData: {\r\n      type_id: urlTypeLinkId,\r\n      to_id: payLinkId,\r\n    }\r\n  });\r\n\r\n  assert.notStrictEqual(urlLink, undefined)\r\n\r\n  const url = urlLink.value.value;\r\n\r\n  assert.notStrictEqual(urlLink, undefined)\r\n\r\n  const browser = await puppeteer.launch({ args: ['--no-sandbox'] });\r\n  const page = await browser.newPage();\r\n  await payInBrowser({\r\n    browser,\r\n    page,\r\n    url,\r\n  });\r\n\r\n  const { link: payedLink } = await tryGetLink({\r\n    delayMs: 1000, attemptsCount: 10, selectData: {\r\n      type_id: payedTypeLinkId,\r\n      to_id: payLinkId,\r\n    }\r\n  });\r\n  assert.notEqual(payedLink, undefined)\r\n\r\n  async function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async function payInBrowser({ page, browser, url }) {\r\n    await page.goto(url, { waitUntil: 'networkidle2' });\r\n    await sleep(5000);\r\n    const oldForm = await page.evaluate(() => {\r\n      return !!document.querySelector(\r\n        'input[automation-id=\"tui-input-card-grouped__card\"]'\r\n      );\r\n    });\r\n    if (oldForm) {\r\n      console.log('OLD FORM!!!!!!!');\r\n      // Старая форма используется на тестовом сервере\r\n      const cvc1 = await page.evaluate(() => {\r\n        return !!document.querySelector(\r\n          'button[automation-id=\"pay-card__submit\"]'\r\n        );\r\n      });\r\n\r\n      if (cvc1) {\r\n        await page.waitForSelector(\r\n          'input[automation-id=\"tui-input-card-grouped__card\"]'\r\n        );\r\n        await sleep(300);\r\n        await page.type(\r\n          'input[automation-id=\"tui-input-card-grouped__card\"]',\r\n          process.env.PAYMENTS_C2B_CARD_NUMBER_SUCCESS\r\n        ); // card number\r\n        await sleep(300);\r\n        await page.keyboard.press('Tab');\r\n        await sleep(300);\r\n        await page.type(\r\n          'input[automation-id=\"tui-input-card-grouped__expire\"]',\r\n          process.env.PAYMENTS_C2B_CARD_EXPDATE\r\n        ); // expired date\r\n        await sleep(300);\r\n        await page.keyboard.press('Tab');\r\n        await sleep(300);\r\n        await page.type(\r\n          'input[automation-id=\"tui-input-card-grouped__cvc\"]',\r\n          process.env.PAYMENTS_C2B_CARD_CVC\r\n        ); // CVC code\r\n        await sleep(300);\r\n        await page.click('button[automation-id=\"pay-card__submit\"]'); // submit button\r\n      } else {\r\n        await page.waitForSelector(\r\n          'input[automation-id=\"tui-input-card-grouped__card\"]'\r\n        );\r\n        await sleep(300);\r\n        await page.type(\r\n          'input[automation-id=\"tui-input-card-grouped__card\"]',\r\n          process.env.PAYMENTS_C2B_CARD_NUMBER_SUCCESS\r\n        ); // card number\r\n        await sleep(300);\r\n        await page.keyboard.press('Tab');\r\n        await sleep(300);\r\n        await page.type(\r\n          'input[automation-id=\"tui-input-card-grouped__expire\"]',\r\n          process.env.PAYMENTS_C2B_CARD_EXPDATE\r\n        ); // expired date\r\n        await sleep(300);\r\n        await page.keyboard.press('Tab');\r\n        await sleep(300);\r\n        await page.type(\r\n          'input[automation-id=\"tui-input-card-grouped__cvc\"]',\r\n          process.env.PAYMENTS_C2B_CARD_CVC\r\n        ); // CVC code\r\n        await sleep(300);\r\n        await page.click('button[automation-id=\"card-form__submit\"]'); // submit button\r\n      }\r\n      // TODO: пока старая форма вызывалась только на тестовой карте, где ввод смс кода не нужен\r\n      await sleep(1000);\r\n    } else {\r\n      console.log('NEW FORM!!!!!!!');\r\n      await page.type('#pan', process.env.PAYMENTS_C2B_CARD_NUMBER_SUCCESS); // card number\r\n      await page.type('#expDate', process.env.PAYMENTS_C2B_CARD_EXPDATE); // expired date\r\n      await page.type('#card_cvc', process.env.PAYMENTS_C2B_CARD_CVC); // CVC code\r\n      await page.click('button[type=submit]'); // submit button\r\n      await page.waitForSelector('input[name=\"password\"]');\r\n      const code = prompt('enter code ');\r\n      console.log('code', code);\r\n      await page.type('input[name=\"password\"]', code);\r\n      await sleep(3000);\r\n    }\r\n    await browser.close();\r\n  };\r\n\r\n  async function getRouteLink() {\r\n    const selectData = {\r\n      type_id: {\r\n        _id: [deep.id, \"Route\"]\r\n      },\r\n      in: {\r\n        type_id: containTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n      }\r\n    };\r\n\r\n    const { data: [routeLink] } = await deep.select()\r\n\r\n    if (!routeLink) {\r\n      throw new Error(`Select with data ${selectData} returned empty result`)\r\n    }\r\n\r\n    if (!routeLink.value?.value) {\r\n      throw new Error(`${routeLink.id} must have a value`)\r\n    }\r\n\r\n    return routeLink;\r\n  }\r\n\r\n  async function getPort() {\r\n    const selectData = {\r\n      type_id: {\r\n        _id: [deep.id, \"Port\"]\r\n      },\r\n      in: {\r\n        type_id: containTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n      }\r\n    };\r\n\r\n    const { data: [port] } = await deep.select()\r\n\r\n    if (!port) {\r\n      throw new Error(`Select with data ${selectData} returned empty result`)\r\n    }\r\n\r\n    if (!port.value?.value) {\r\n      throw new Error(`${port.id} must have a value`)\r\n    }\r\n\r\n    return port;\r\n  }\r\n\r\n  async function installDependencies() {\r\n    execSync(`npm install puppeteer && sudo apt update && sudo apt install -y libgbm-dev chromium-browser gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget`)\r\n  }\r\n\r\n  async function insertRouteHandler() {\r\n    await deep.serial({\r\n      operations: [\r\n        createSerialOperation({\r\n          table: 'links',\r\n          type: 'insert',\r\n          objects: {\r\n            id: routeLinkId,\r\n            type_id: routeTypeLinkId,\r\n            in: {\r\n              data: {\r\n                type_id: containTypeLinkId,\r\n                from_id: triggeredByLinkId\r\n              }\r\n            },\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'links',\r\n          type: 'insert',\r\n          objects: {\r\n            type_id: await deep.id(\"@deep-foundation/core\", \"HandleRoute\"),\r\n            from_id: routeLinkId,\r\n            to_id: notificationHandlerLinkId,\r\n            in: {\r\n              data: {\r\n                type_id: containTypeLinkId,\r\n                from_id: triggeredByLinkId\r\n              }\r\n            },\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'links',\r\n          type: 'insert',\r\n          objects: {\r\n            id: routerLinkId,\r\n            type_id: routerTypeLinkId,\r\n            in: {\r\n              data: {\r\n                type_id: containTypeLinkId,\r\n                from_id: triggeredByLinkId\r\n              }\r\n            },\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'links',\r\n          type: 'insert',\r\n          objects: {\r\n            id: routerStringUseLinkId,\r\n            type_id: routerStringUseTypeLinkId,\r\n            from_id: routeLinkId,\r\n            to_id: routerLinkId,\r\n            in: {\r\n              data: {\r\n                type_id: containTypeLinkId,\r\n                from_id: triggeredByLinkId\r\n              }\r\n            },\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'strings',\r\n          type: 'insert',\r\n          objects: {\r\n            link_id: routerStringUseLinkId,\r\n            value: route\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'links',\r\n          type: 'insert',\r\n          objects: {\r\n            id: portLinkId,\r\n            type_id: portTypeLinkId,\r\n            in: {\r\n              data: {\r\n                type_id: containTypeLinkId,\r\n                from_id: triggeredByLinkId\r\n              }\r\n            },\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'numbers',\r\n          type: 'insert',\r\n          objects: {\r\n            link_id: portLinkId,\r\n            value: port\r\n          }\r\n        }),\r\n        createSerialOperation({\r\n          table: 'links',\r\n          type: 'insert',\r\n          objects: {\r\n            type_id: routerListeningTypeLinkId,\r\n            from_id: routerLinkId,\r\n            to_id: portLinkId,\r\n            in: {\r\n              data: {\r\n                type_id: containTypeLinkId,\r\n                from_id: triggeredByLinkId\r\n              }\r\n            },\r\n          }\r\n        }),\r\n      ]\r\n    });\r\n  }\r\n\r\n  async function getStorageBusinessInsertSerialOperationData({ storageBusinessLinkId }) {\r\n    const storageBusinessTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"StorageBusiness\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: storageBusinessLinkId,\r\n        type_id: storageBusinessTypeLinkId,\r\n        in: {\r\n          data: {\r\n            type_id: containTypeLinkId,\r\n            from_id: triggeredByLinkId,\r\n          }\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getTerminalPasswordInsertSerialOperationData({ terminalPasswordLinkId, storageBusinessLinkId }) {\r\n    const terminalPasswordTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"TerminalPassword\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: terminalPasswordLinkId,\r\n        type_id: terminalPasswordTypeLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: storageBusinessLinkId,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getTerminalPasswordValueInsertSerialOperationData({ terminalPassword, terminalPasswordLinkId }) {\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'strings',\r\n      objects: {\r\n        link_id: terminalPasswordLinkId,\r\n        value: terminalPassword\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getUsesTerminalPasswordInsertSerialOperationData({ terminalPasswordLinkId, storageBusinessLinkId }) {\r\n    const usesTerminalPasswordTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"UsesTerminalPassword\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        type_id: usesTerminalPasswordTypeLinkId,\r\n        from_id: storageBusinessLinkId,\r\n        to_id: terminalPasswordLinkId,\r\n        in: {\r\n          data: {\r\n            type_id: containTypeLinkId,\r\n            from_id: storageBusinessLinkId,\r\n          }\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getTerminalKeyInsertSerialOperationData({ terminalKeyLinkId, storageBusinessLinkId }) {\r\n    const terminalKeyTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"TerminalKey\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: terminalKeyLinkId,\r\n        type_id: terminalKeyTypeLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: storageBusinessLinkId,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getTerminalKeyValueInsertSerialOperationData({ terminalKeyLinkId, terminalKey }) {\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'strings',\r\n      objects: {\r\n        link_id: terminalKeyLinkId,\r\n        value: terminalKey\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getUsesTerminalKeyInsertSerialOperationData({ terminalKeyLinkId, storageBusinessLinkId }) {\r\n    const usesTerminalKeyTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"UsesTerminalKey\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        type_id: usesTerminalKeyTypeLinkId,\r\n        from_id: storageBusinessLinkId,\r\n        to_id: terminalKeyLinkId,\r\n        in: {\r\n          data: {\r\n            type_id: containTypeLinkId,\r\n            from_id: storageBusinessLinkId,\r\n          }\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getNotificationUrlInsertSerialOperationData({ notificationUrlLinkId, storageBusinessLinkId }) {\r\n    const notificationUrlTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"NotificationUrl\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: notificationUrlLinkId,\r\n        type_id: notificationUrlTypeLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: storageBusinessLinkId,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getNotificationUrlValueInsertSerialOperationData({ notificationUrlLinkId, notificationUrl }) {\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'strings',\r\n      objects: {\r\n        link_id: notificationUrlLinkId,\r\n        value: notificationUrl\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getUsesNotificationUrlInsertSerialOperationData({ notificationUrlLinkId, storageBusinessLinkId }) {\r\n    const usesNotificationUrlTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"UsesNotificationUrl\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        type_id: usesNotificationUrlTypeLinkId,\r\n        from_id: storageBusinessLinkId,\r\n        to_id: notificationUrlLinkId,\r\n        in: {\r\n          data: {\r\n            type_id: containTypeLinkId,\r\n            from_id: storageBusinessLinkId,\r\n          }\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  async function getProductInsertSerialOperationData({ productLinkId }) {\r\n    const syncTextFileTypeLinkId = await deep.id(\"@deep-foundation/core\", \"SyncTextFile\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: productLinkId,\r\n        type_id: syncTextFileTypeLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: triggeredByLinkId,\r\n            },\r\n          ],\r\n        },\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getTerminalKeyLink() {\r\n    const terminalKeyTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b-test\", \"TerminalKey\");\r\n    const selectData = {\r\n      type_id: terminalKeyTypeLinkId,\r\n      in: {\r\n        type_id: containTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n      }\r\n    };\r\n    const { data: [terminalKeyLink] } = await deep.select(selectData);\r\n\r\n    if (!terminalKeyLink) {\r\n      throw new Error(`Select with data ${JSON.stringify(selectData)} returned empty result`)\r\n    }\r\n\r\n    if (!terminalKeyLink.value?.value) {\r\n      throw new Error(`${terminalKeyLink.id} must have value`)\r\n    }\r\n\r\n    return terminalKeyLink;\r\n  }\r\n\r\n  async function getTerminalPasswordLink() {\r\n    const terminalPasswordTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b-test\", \"TerminalPassword\");\r\n    const selectData = {\r\n      type_id: terminalPasswordTypeLinkId,\r\n      in: {\r\n        type_id: containTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n      }\r\n    };\r\n    const { data: [terminalPasswordLink] } = await deep.select(selectData);\r\n\r\n    if (!terminalPasswordLink) {\r\n      throw new Error(`Select with data ${JSON.stringify(selectData)} returned empty result`)\r\n    }\r\n\r\n    if (!terminalPasswordLink.value?.value) {\r\n      throw new Error(`${terminalPasswordLink.id} must have value`)\r\n    }\r\n\r\n    return terminalPasswordLink;\r\n  }\r\n\r\n  async function getPaymentInsertSerialOperationData({ paymentLinkId, storageBusinessLinkId}) {\r\n    const paymentTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Payment\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: paymentLinkId,\r\n        type_id: paymentTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n        to_id: storageBusinessLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: triggeredByLinkId,\r\n            },\r\n          ],\r\n        },\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getSumInsertSerialOperationData({ sumLinkId, paymentLinkId }) {\r\n    const sumTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Sum\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: sumLinkId,\r\n        type_id: sumTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n        to_id: paymentLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: triggeredByLinkId,\r\n            },\r\n          ],\r\n        },\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getSumValueInsertSerialOperationData({ sumLinkId, sum }) {\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'numbers',\r\n      objects: {\r\n        link_id: sumLinkId,\r\n        value: sum\r\n      }\r\n    });\r\n  }\r\n\r\n  async function getObjectInsertSerialOperationData({ objectLinkId, paymentLinkId, productLinkId }) {\r\n    const objectTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Object\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: objectLinkId,\r\n        type_id: objectTypeLinkId,\r\n        from_id: paymentLinkId,\r\n        to_id: productLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: triggeredByLinkId,\r\n            },\r\n          ],\r\n        },\r\n      }\r\n    })\r\n  }\r\n\r\n  async function getPayInsertSerialOperationData({payLinkId, sumLinkId}) {\r\n    const payTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Pay\");\r\n    return createSerialOperation({\r\n      type: 'insert',\r\n      table: 'links',\r\n      objects: {\r\n        id: payLinkId,\r\n        type_id: payTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n        to_id: sumLinkId,\r\n        in: {\r\n          data: [\r\n            {\r\n              type_id: containTypeLinkId,\r\n              from_id: triggeredByLinkId,\r\n            },\r\n          ],\r\n        },\r\n      }\r\n    });\r\n  }\r\n\r\n  async function getSumLink() {\r\n    const sumTypeLinkId = await deep.id(\"@deep-foundation/payments-tinkoff-c2b\", \"Sum\");\r\n    const selectData = {\r\n      type_id: sumTypeLinkId,\r\n      in: {\r\n        type_id: containTypeLinkId,\r\n        from_id: triggeredByLinkId,\r\n      }\r\n    };\r\n    const { data: [sumLink] } = await deep.select(selectData);\r\n\r\n    if (!sumLink) {\r\n      throw new Error(`Select with data ${JSON.stringify(selectData)} returned empty result`)\r\n    }\r\n\r\n    return sumLink;\r\n  }\r\n}"
       }
     },
     {
       "id": "DoTestInsertHandler",
       "type": 3,
       "from": 4,
       "to": "DoTestInsertHandlerCode"
     },
     {
       "id": "HandleDoTest",
       "type": 5,
       "from": "DoTest",
       "to": "DoTestInsertHandler"
     }
   ],
   "errors": [],
   "dependencies": [
     {
       "name": "@freephoenix888/test",
       "version": "0.0.3"
     },
     {
       "name": "@deep-foundation/core",
       "version": "0.0.2"
     }
   ]
 }